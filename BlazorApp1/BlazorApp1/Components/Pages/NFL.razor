@page "/NFL"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Components.QuickGrid
@using System.Data
@using System.Data.OleDb
@using System.Linq

<h1>NFL</h1>


<ul class="nav nav-tabs "> @*This is a list, that is styled to look like tabs. Each item has a click event that updates the table property by changing the string text*@
    <li class="nav-item">
        <a class="nav-link active" @onclick='() => Navigate("NFLStandings2023")'>Standings</a>
    </li>
    <li class="nav-item">
        <a class="nav-link active" @onclick='() => Navigate("NFLTeamStatsOffense2023")'>Team Offense</a>
    </li>
    <li class="nav-item">
        <a class="nav-link active" @onclick='() => Navigate("NFLTeamStatsDefensive2023")'>Team Defense</a>
    </li>
    <li class="nav-item">
        <a class="nav-link active" @onclick='() => Navigate("NFLRushingStats2023")'>Rushing</a>
    </li>
    <li class="nav-item">
        <a class="nav-link active" @onclick='() => Navigate("NFLPassingStats2023")'>Passing</a>
    </li>
    <li class="nav-item">
        <a class="nav-link active" @onclick='() => Navigate("NFLReceivingStats2023")'>Recieving</a>
    </li>
    <li class="nav-item">
        <a class="nav-link active" @onclick='() => Navigate("NFLDefensiveStats2023")'>Defense</a>
    </li>

</ul>

<div style="max-height:500px; overflow:scroll;"> @*Put table in a div so it would have scrollbars*@

    <table class="table table-dark table-striped table-hover table-responsive">

        <thead class="sticky-top"> @*Made the headers sticky so they stap at the top when you scroll*@
            <tr>
                @foreach (DataColumn column in dataTable.Columns)
                {
                    <th>@column.ColumnName</th>
                }
            </tr>
        </thead>

        <tbody >
                @foreach (DataRow row in dataTable.Rows)
                {
                <tr>
                        @foreach (var cell in row.ItemArray)
                        {
                        <td>@cell.ToString()</td>
                        }
                </tr>
                }

        </tbody>
    </table>
</div>


<div class="d-flex gap-2 pt-4" > @*Inline css because I feel like it*@

    <button class="btn btn-primary" @onclick="SearchTable">Search</button> @*Search Button*@

    <input class="" @bind="searchText" @bind:event="oninput" /> @*Input field used for searching tables*@

    <select class="form-select w-auto me-auto" @bind="column">
        @* A select element (like a dropdown combobox) *@

        <option value="@dataTable.Columns[0].ColumnName"> @dataTable.Columns[0].ColumnName </option> @*Set default value so column updates consistently*@

        @{
            var columnList = dataTable.Columns.Cast<DataColumn>(); //Cast columns so I can use the skip function
        }

        @foreach (DataColumn column in columnList.Skip(1)) @*First item is duplicate of default value, so skip it*@
        {
            <option> @column.ColumnName </option>
        }

    </select>


    <button class="btn btn-secondary" @onclick="ClearAndReset">Clear </button> @*Clear Button*@

    <button class="btn btn-danger">Exit</button>


</div>

<div class="d-inline-flex gap-2 ">

</div>



@*Test elemets*@
@* <p>Search Text: @searchText </p> 
<p>Selected Column: @column</p>
 *@




@code {

    Sport Football; //Initialize our class

    //Our class needs a connection string, and a table name to work
    private readonly string connectionString = @"Provider=Microsoft.ACE.OLEDB.12.0;Data Source=DatabaseNFL.accdb";
    string defaultTable = "NFLStandings2023"; 

    //Initialize variables
    DataTable dataTable;
    string column = "";
    string searchText = "";
    const string allColumns = "";


    protected override void OnInitialized()  //On the page load, it calls the search method with default values

    {
        Football = new Sport(connectionString, defaultTable);
        SearchTable();
        column = dataTable.Columns[0].ColumnName; //Set column (select element) to first option
    }

    private void Navigate(string newTable) //The navigation tabs (which are just list items) call this method on click

    {
        Football.Table = newTable;
        ClearAndReset();
    }

    private void ClearAndReset()
    {
        searchText = "";
        dataTable = Football.Search(allColumns, searchText); //If column is blank, search query performs a 'select all' statement
        column = dataTable.Columns[0].ColumnName; //Set column (select element) to first option
    }

    private void SearchTable()
    {
        dataTable = Football.Search(column, searchText); //Class search method returns a new datatable filled with results
    }
}
